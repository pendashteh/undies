#!/usr/bin/env bash
#
#
# Usage:
# 1: call as argument for undies
# $ /path/to/undies -- /path/to/script.undies
# or 
# $ undies -- script1__ -- __arg=2 script2__
#
# 2: source inside the script
# $ /path/to/script.undies
# $ tail /path/to/script.undies -n1
# > . undies
#

__API__=4

_err_fn_na=101 ;: 'function does not exists'

__dryrun__=${__dryrun__-}

__confirm__=${__confirm__-1}

__silent__=${__silent__-}

function __help {
  help_var=$(j __ $__parent__ ${1} help)
  t "${!help_var}"
}

function j () {
  sed "s|\s|$1|g" <<<${@:2}
}

declare -A __t_vars
function t () {
  local str=$1
  local -n ref_vars=${2:-__t_vars}
  __t_vars[__app__]=$(__app)
  local sed_search=';'
  for k in ${!ref_vars[@]}; do
    v=${ref_vars[$k]}
    sed_search="$sed_search s|$k|$v|g;"
  done
  sed "$sed_search" <<<$str
}

function __app {
  : 'retrieves the app name, ideally the executed command.'
  basename $__src__
}

function __exec {
  : '> __exec [bash commands]'
  : '; prompts the commands for the user and executes them'
  if test -z ${__silent__}; then
    echo "> $@"
  else
    __confirm__=
  fi
  test ! -z ${__confirm__} && {
    read -n 1 -p 'Are you sure? Y|n ' __confirm__
    echo
  }
  case $__confirm__ in n|N) return 1;; esac
  test -n "${__dryrun__}" && echo '# '"$@" || "$@"
}

function __run {
  : 'Usage: > __run [task] [args..]'
  __task__=$1
  __fn_prefix=''
  shift
  __process
  local func=${__fn_prefix}${__task__}__
  __exists ${func} || return
  __puton__ "$@" && ${func} "$@" && __takeoff__ "$@"
}

function __process {
  if [ -z $__task__ ]; then
    __fn_prefix=''
    __task__='__default'
  fi
}

function __exists {
  : 'Usage: > __exists $fname # Returns false if $fname is not a function.'
  typeset -F $1 >/dev/null || __return $_err_fn_na $1
}

function __return {
  read -r number info <<< $@
  __return_info=$info
  return $number
}

function __tasks {
  typeset -F | cut -d' ' -f3- | grep ^${prefix}[^__][^__]*__$ | sort | sed 's|__| |g'
}

function __params {
  declare -p | grep -E '[[:space:]]__[^__]+=.*$' | awk '{printf "%s\n", $3}'
}

__exists __default__ ||
function __default__ {
  : 'display help if __default__ is not implemented.'
  help__ "$@"
}

help__help=${help__help:-'@arg task @does declare task implementation'}
__exists help__ ||
function help__ {
  printf -- 'undies API version %s\n\n' $__API__
  if [ -n "$1" ] && __exists ${1}__; then
    local task=$1
    __help $task | sed 's|@|\n@|g'
    echo
    declare -f ${task}__
    return
  fi
  [[ -n $__default__help ]] && t "$__default__help" && echo
  echo 'Parameters:'
  __params
  echo
  echo 'Available tasks:'
  for task in $(__tasks); do
    printf ' - %-10s# %s\n' $task "$(__help $task)"
  done
  printf -- '\n'
  printf -- 'Usage:\n'
  printf -- ' $ %s [__param=value] [task]\n' $(__app)
}

__puton__help='@does get invoked before any task @return false to stop the application.'
__exists __puton__ ||
function __puton__ {
  : ${__app__} help ${FUNCNAME::-2}
}

__takeoff__help='@does get invoked if task returns no error.'
__exists __takeoff__ ||
function __takeoff__ {
  : ${__app__} help ${FUNCNAME::-2}
}

__fallbck__help='@does get invoked if the task is not found or the last command returns non-zero.'
__exists __fallback__ ||
function __fallback__ {
  case $? in
    $_err_fn_na)
      echo >&2 "task $__return_info wasn't found."
      ;;
    *)
      >&2 __help $__task__
  esac
}

function __main__ {
  __src__=${__app__:-$(realpath $(which -a "$0" | grep -m1 ""))}
  : '$ undies -- /path/to/undies'
  __path__=$(dirname $__src__)
  # Loop through all the arguments
  while [ $# -gt 0 ]; do
    case "$1" in
      [a-zA-Z0-9_]*=[![:space:]]*)
	STRING=$1
	VAR="${STRING%%=*}" && VAR="${VAR,,}" && VALUE="${STRING#*=}"
        #VALUE="$(case "$VALUE" in 1|yes|true) echo 1;; 0|no|false) ;; *) echo "$VALUE";; esac)"
	declare "$VAR=$VALUE"
	shift
	;;
      [a-zA-Z0-9_]*)
	break
        ;;
      --)
        shift
	__src__=$(realpath $1)
	__=__ source $__src__
	shift
        ;;
    esac
  done
  __run "$@" || __fallback__ "$@" || >&2 echo 'failed to __run '$@
}

[[ "$__" = __ ]] && return

__main__ "$@"
